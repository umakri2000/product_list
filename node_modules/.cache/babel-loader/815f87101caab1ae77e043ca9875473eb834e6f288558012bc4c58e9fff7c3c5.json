{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar dispatchArr = [];\nvar idArr = [];\nvar slice = createSlice({\n  name: 'recepie',\n  initialState: [],\n  reducers: {\n    stateChange: (state, action) => {\n      var getState = [...state];\n      if (getState.length == 0) {\n        getState.push(action.payload.formjson);\n        return getState;\n      } else {\n        let filterState = [...getState];\n        let itemExists = false;\n        filterState = filterState.map(val => {\n          if (val.id === action.payload.formjson.id) {\n            itemExists = true;\n            return action.payload.formjson;\n          }\n          return val;\n        });\n        if (!itemExists) {\n          filterState.push(action.payload.formjson);\n        }\n        ;\n        if (action.payload.formjson.count == '0') {\n          filterState = filterState.filter(val => val.id !== action.payload.formjson.id);\n        }\n        console.log(\"Updated State:\", JSON.parse(JSON.stringify(filterState)));\n        return filterState;\n      }\n    },\n    removeElement: (state, action) => {\n      var removeState = [...state];\n      removeState = removeState.filter(removeId => {\n        return removeId.id != action.payload.remveId;\n      });\n      console.log(JSON.parse(JSON.stringify(removeState)));\n      return removeState;\n    },\n    resetElement: (state, action) => {\n      return JSON.parse(sessionStorage.getItem('foodData'));\n    }\n  }\n});\nexport var {\n  stateChange,\n  removeElement,\n  resetElement\n} = slice.actions;\nexport var expreducer = slice.reducer;","map":{"version":3,"names":["createSlice","dispatchArr","idArr","slice","name","initialState","reducers","stateChange","state","action","getState","length","push","payload","formjson","filterState","itemExists","map","val","id","count","filter","console","log","JSON","parse","stringify","removeElement","removeState","removeId","remveId","resetElement","sessionStorage","getItem","actions","expreducer","reducer"],"sources":["D:/reactlearn/product/product/src/slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nvar dispatchArr=[];\r\nvar idArr=[];\r\nvar slice=createSlice({\r\n    name : 'recepie',\r\n    initialState:[] ,\r\n    reducers:{\r\n        stateChange:(state,action)=>{\r\n            var getState=[...state];\r\n            if(getState.length ==0){\r\n                getState.push(action.payload.formjson);\r\n              return  getState \r\n            }\r\n            else{\r\n\r\n                let filterState = [...getState];\r\n                let itemExists = false;\r\n                filterState = filterState.map((val) => {\r\n                 if (val.id === action.payload.formjson.id) { \r\n                     itemExists = true;\r\n                     return action.payload.formjson;\r\n                    }\r\n                return val;\r\n                 });\r\n              if (!itemExists)  {filterState.push(action.payload.formjson)};\r\n                \r\n                if(action.payload.formjson.count == '0'){\r\n                    filterState = filterState.filter(val => val.id !== action.payload.formjson.id);                       \r\n                }\r\n\r\nconsole.log(\"Updated State:\", JSON.parse(JSON.stringify(filterState)));\r\n\r\nreturn filterState;\r\n\r\n            }\r\n    },\r\n    removeElement:(state,action)=>{\r\n\r\nvar removeState=[...state];\r\nremoveState=removeState.filter((removeId) => {return  removeId.id != action.payload.remveId})\r\n        console.log(JSON.parse(JSON.stringify(removeState)));\r\n        return removeState\r\n\r\n    },\r\n    resetElement:(state,action)=>{\r\n        return JSON.parse(sessionStorage.getItem('foodData'))\r\n\r\n\r\n    }\r\n}\r\n    \r\n    \r\n}) \r\n\r\nexport var {stateChange,removeElement,resetElement}=slice.actions\r\nexport var expreducer=slice.reducer\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,IAAIC,WAAW,GAAC,EAAE;AAClB,IAAIC,KAAK,GAAC,EAAE;AACZ,IAAIC,KAAK,GAACH,WAAW,CAAC;EAClBI,IAAI,EAAG,SAAS;EAChBC,YAAY,EAAC,EAAE;EACfC,QAAQ,EAAC;IACLC,WAAW,EAACA,CAACC,KAAK,EAACC,MAAM,KAAG;MACxB,IAAIC,QAAQ,GAAC,CAAC,GAAGF,KAAK,CAAC;MACvB,IAAGE,QAAQ,CAACC,MAAM,IAAG,CAAC,EAAC;QACnBD,QAAQ,CAACE,IAAI,CAACH,MAAM,CAACI,OAAO,CAACC,QAAQ,CAAC;QACxC,OAAQJ,QAAQ;MAClB,CAAC,MACG;QAEA,IAAIK,WAAW,GAAG,CAAC,GAAGL,QAAQ,CAAC;QAC/B,IAAIM,UAAU,GAAG,KAAK;QACtBD,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAEC,GAAG,IAAK;UACtC,IAAIA,GAAG,CAACC,EAAE,KAAKV,MAAM,CAACI,OAAO,CAACC,QAAQ,CAACK,EAAE,EAAE;YACvCH,UAAU,GAAG,IAAI;YACjB,OAAOP,MAAM,CAACI,OAAO,CAACC,QAAQ;UAC/B;UACJ,OAAOI,GAAG;QACT,CAAC,CAAC;QACL,IAAI,CAACF,UAAU,EAAG;UAACD,WAAW,CAACH,IAAI,CAACH,MAAM,CAACI,OAAO,CAACC,QAAQ,CAAC;QAAA;QAAC;QAE3D,IAAGL,MAAM,CAACI,OAAO,CAACC,QAAQ,CAACM,KAAK,IAAI,GAAG,EAAC;UACpCL,WAAW,GAAGA,WAAW,CAACM,MAAM,CAACH,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKV,MAAM,CAACI,OAAO,CAACC,QAAQ,CAACK,EAAE,CAAC;QAClF;QAEhBG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACX,WAAW,CAAC,CAAC,CAAC;QAEtE,OAAOA,WAAW;MAEN;IACR,CAAC;IACDY,aAAa,EAACA,CAACnB,KAAK,EAACC,MAAM,KAAG;MAElC,IAAImB,WAAW,GAAC,CAAC,GAAGpB,KAAK,CAAC;MAC1BoB,WAAW,GAACA,WAAW,CAACP,MAAM,CAAEQ,QAAQ,IAAK;QAAC,OAAQA,QAAQ,CAACV,EAAE,IAAIV,MAAM,CAACI,OAAO,CAACiB,OAAO;MAAA,CAAC,CAAC;MACrFR,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACE,WAAW,CAAC,CAAC,CAAC;MACpD,OAAOA,WAAW;IAEtB,CAAC;IACDG,YAAY,EAACA,CAACvB,KAAK,EAACC,MAAM,KAAG;MACzB,OAAOe,IAAI,CAACC,KAAK,CAACO,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;IAGzD;EACJ;AAGA,CAAC,CAAC;AAEF,OAAO,IAAI;EAAC1B,WAAW;EAACoB,aAAa;EAACI;AAAY,CAAC,GAAC5B,KAAK,CAAC+B,OAAO;AACjE,OAAO,IAAIC,UAAU,GAAChC,KAAK,CAACiC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}