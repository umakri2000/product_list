{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar dispatchArr = [];\nvar idArr = [];\nvar slice = createSlice({\n  name: 'recepie',\n  initialState: [],\n  reducers: {\n    stateChange: (state, action) => {\n      // alert('l')\n      // console.log(JSON.parse(JSON.stringify(JSON.parse(state))));\n      var getState = [...state];\n      if (getState.length == 0) {\n        getState.push(action.payload.formjson);\n        return getState;\n      } else {\n        // let filterState = [...getState];\n        // let itemExists = false;\n        // getState.forEach((val) => {\n        //     if (val.id === action.payload.formjson.id) {\n        //         itemExists = true;\n        //       }\n        // });\n        // if (!itemExists) {\n        //     filterState.push(action.payload.formjson);\n        //   }\n\n        //   console.log(\"filterState....\", JSON.parse(JSON.stringify(filterState)));\n        //  return filterState;\n        let filterState = getState.map(val => {\n          console.log(\"Current Item:\", val); // Log the current item\n          console.log(\"Incoming Item ID:\", action.payload.formjson.id); // Log the incoming ID\n\n          if (val.id === action.payload.formjson.id) {\n            console.log(\"Replacing:\", val); // Log the item that will be replaced\n            return action.payload.formjson; // Replace with the new object\n          }\n\n          // Return the original item if no match\n          return val;\n        });\n        console.log(\"Updated State:\", JSON.parse(JSON.stringify(filterState))); // Log the updated array\n        return filterState;\n        console.log(\"filterState....\", JSON.parse(JSON.stringify(filterState)));\n        return filterState;\n      }\n\n      // getState.push(filterState);\n    }\n  }\n});\nexport var {\n  stateChange\n} = slice.actions;\nexport var expreducer = slice.reducer;","map":{"version":3,"names":["createSlice","dispatchArr","idArr","slice","name","initialState","reducers","stateChange","state","action","getState","length","push","payload","formjson","filterState","map","val","console","log","id","JSON","parse","stringify","actions","expreducer","reducer"],"sources":["D:/reactlearn/product/product/src/slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nvar dispatchArr=[];\r\nvar idArr=[];\r\nvar slice=createSlice({\r\n    name : 'recepie',\r\n    initialState:[] ,\r\n    reducers:{\r\n        stateChange:(state,action)=>{\r\n            \r\n// alert('l')\r\n            // console.log(JSON.parse(JSON.stringify(JSON.parse(state))));\r\n            var getState=[...state];\r\n            if(getState.length ==0){\r\n                getState.push(action.payload.formjson);\r\n              return  getState \r\n\r\n            }\r\n            else{\r\n                // let filterState = [...getState];\r\n                // let itemExists = false;\r\n                // getState.forEach((val) => {\r\n                //     if (val.id === action.payload.formjson.id) {\r\n                //         itemExists = true;\r\n                //       }\r\n                // });\r\n                // if (!itemExists) {\r\n                //     filterState.push(action.payload.formjson);\r\n                //   }\r\n\r\n                //   console.log(\"filterState....\", JSON.parse(JSON.stringify(filterState)));\r\n                //  return filterState;\r\n                let filterState = getState.map((val) => {\r\n                    console.log(\"Current Item:\", val);  // Log the current item\r\n                    console.log(\"Incoming Item ID:\", action.payload.formjson.id);  // Log the incoming ID\r\n                  \r\n                    if (val.id === action.payload.formjson.id) {\r\n                      console.log(\"Replacing:\", val);  // Log the item that will be replaced\r\n                      return action.payload.formjson;  // Replace with the new object\r\n                    }\r\n                  \r\n                    // Return the original item if no match\r\n                    return val;\r\n                  });\r\n                  \r\n                  console.log(\"Updated State:\", JSON.parse(JSON.stringify(filterState)));  // Log the updated array\r\n                  return filterState;\r\n                  \r\n\r\nconsole.log(\"filterState....\", JSON.parse(JSON.stringify(filterState)));\r\nreturn filterState;\r\n\r\n\r\n            }\r\n            \r\n            // getState.push(filterState);\r\n            \r\n            \r\n\r\n            \r\n  \r\n      \r\n    }}\r\n}) \r\n\r\nexport var {stateChange}=slice.actions\r\nexport var expreducer=slice.reducer\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,IAAIC,WAAW,GAAC,EAAE;AAClB,IAAIC,KAAK,GAAC,EAAE;AACZ,IAAIC,KAAK,GAACH,WAAW,CAAC;EAClBI,IAAI,EAAG,SAAS;EAChBC,YAAY,EAAC,EAAE;EACfC,QAAQ,EAAC;IACLC,WAAW,EAACA,CAACC,KAAK,EAACC,MAAM,KAAG;MAEpC;MACY;MACA,IAAIC,QAAQ,GAAC,CAAC,GAAGF,KAAK,CAAC;MACvB,IAAGE,QAAQ,CAACC,MAAM,IAAG,CAAC,EAAC;QACnBD,QAAQ,CAACE,IAAI,CAACH,MAAM,CAACI,OAAO,CAACC,QAAQ,CAAC;QACxC,OAAQJ,QAAQ;MAElB,CAAC,MACG;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA,IAAIK,WAAW,GAAGL,QAAQ,CAACM,GAAG,CAAEC,GAAG,IAAK;UACpCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,GAAG,CAAC,CAAC,CAAE;UACpCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEV,MAAM,CAACI,OAAO,CAACC,QAAQ,CAACM,EAAE,CAAC,CAAC,CAAE;;UAE/D,IAAIH,GAAG,CAACG,EAAE,KAAKX,MAAM,CAACI,OAAO,CAACC,QAAQ,CAACM,EAAE,EAAE;YACzCF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,GAAG,CAAC,CAAC,CAAE;YACjC,OAAOR,MAAM,CAACI,OAAO,CAACC,QAAQ,CAAC,CAAE;UACnC;;UAEA;UACA,OAAOG,GAAG;QACZ,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACR,WAAW,CAAC,CAAC,CAAC,CAAC,CAAE;QACzE,OAAOA,WAAW;QAGpCG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACR,WAAW,CAAC,CAAC,CAAC;QACvE,OAAOA,WAAW;MAGN;;MAEA;IAOR;EAAC;AACL,CAAC,CAAC;AAEF,OAAO,IAAI;EAACR;AAAW,CAAC,GAACJ,KAAK,CAACqB,OAAO;AACtC,OAAO,IAAIC,UAAU,GAACtB,KAAK,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}